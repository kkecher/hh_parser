#!/usr/bin/env python3

"""
Test functions of hh_parser.py
"""

import json

def test_get_areas(r, areas):
      """
      Test get_areas function.
      """
      assert r.status_code == 200, 'Expected status code == 200.\nGot status code == %s' % r.status_code
      assert len(areas) >= 9, 'Expected len(json) >= 9.\n Got len(json) == %d' % len(areas)
      assert list(areas[0].keys()) == ['id', 'parent_id', 'name', 'areas'], "Expected top json keys: ['id', 'parrent_id', 'name', 'areas']\nGot top json keys: %s" % list(areas[0].keys())
      return ()

def test_filter_areas(desired_areas, areas, filtered_area_count, filtered_areas_ids):
      """
      Test filter_areas function.
      """
      for count, area_id in enumerate(filtered_areas_ids):
            area_count = filtered_area_count[count]
            assert areas[area_count]['name'] in desired_areas and areas[area_count]['id'] == area_id, 'Areas filter error. Here is what we know:\n Desired areas: %s\nfiltered_areas_ids: %s' % (desired_areas, filtered_areas_ids)

def test_get_vacancies(areas, filtered_areas_ids, r, vacancies):
    """
    Test get_vacancies function.
    """
    print ('r.url = ', r.url)
    assert r.status_code == 200, 'Expected status code == 200.\nGot status code == %s' % r.status_code

    #Check if all expected fields is in responce[0]. It is especially useful if FILTERS == {}
    check_fields = ["items", "found",   "pages",  "per_page",  "page", "clusters",  "arguments",  "alternate_url"]
    for check_field in check_fields:
      assert check_field in vacancies, 'Expected "%s" to be in JSON[0] but has got no one.' % check_field

      #Check if only data with valid areas is in response.
      for vacancy in vacancies['items']:
            vacancy_area = vacancy['area']['id']
            is_vacancy_area_in_filter(areas, filtered_areas_ids, vacancy_area)
#            assert area['id'] in filtered_areas_ids or area['parent_id'] in filtered_areas_ids, 'Some areas is here with no respect to FILTERS["areas"].\nAt least this guy: %s' % area            

def is_vacancy_area_in_filter(areas, filtered_areas_ids, vacancy_area):
      """
      Test recursively if all got vacancies' areas are in FILTERS{'areas'}. Some area's ids are not in FILTER directly but there parent is.
      """
      for area in areas:
            if area['areas'] != []:
                  current_area = area['areas']                  
#                  print ('current_area = ', current_area)
#                  print ()
#                  input ('enter')
                  is_vacancy_area_in_filter(current_area, filtered_areas_ids, vacancy_area)
            else:
                  current_area = areas[0]
#                  print ('else_current_area = ', current_area)
#                  input ('enter')
#                  print ()
#                  print ("current_area['id'] = ", current_area['id'])
#                  print ("current_area['parent_id'] = ", current_area['parent_id'])
                  if current_area['id'] == 1:
                        print ("current_area['parent_id'] = ", current_area['parent_id'])
                        input ('enter')
#                  print ()
#                  print ('vacancy_area = ', vacancy_area)
#                  print ('vacancy_area == current_area = ', vacancy_area ==  current_area['id'] or vacancy_area ==  current_area['parent_id'])
#                  print ()
#                  if  vacancy_area ==  current_area['id'] or vacancy_area ==  current_area['parent_id']:
#                        input ('enter')
                  return ('vacancy_area == current_area = ', vacancy_area == current_area['id'] or vacancy_area == current_area['parent_id'])
                              
def test_write_to_file(file_, write_to_file_time):
    with open(file_) as f:
          file_time = f.readline().strip()
          assert file_time == write_to_file_time, 'Expected write time == %s.\nGot: %s' % (write_to_file_time, file_time)

def test_all():
    pass
