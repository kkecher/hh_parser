# REQUESTS
headers: {user-agent: kkecher (kkecher@gmail.com)}

# DATABASE
database: ./data/hh.db
tables:
  areas_table: areas
  vacancies_table: vacancies
  streets_table: streets
  metro_stations_table: metro_stations
  employers_table: employers
  vacancies_metro_stations_table: vacancies_metro_stations

# DEBUGGING FILES
areas_file: ./data/areas.json
vacancies_file: ./data/vacancies.json

# Vacancies (not) containing some pattern
#file_nam = file creation timestamp
clean_vacancies_file_path: ./data/clean_vacancies/

# Inverse clean vacancies
# (except ‘areas_id‘ and ‘is_sent’ filters, they are kept direct)
#file_nam = file creation timestamp
dirty_vacancies_file_path: ./data/dirty_vacancies/

# MESSAGE FORMAT
income_tax: 0.13

# TELEGRAM BOT
chat_id: 383837232
# token: put your token in "hh_bot_token" environment variable

# FILTERS
# Template: "{{table_name}}.{column}": ["{operator}", {pattern}]
#
# {table_name} must be from ‘config.yaml > tables’
#
# {column} must be from ‘config.yaml > filters_columns > {table_name}’
# Columns ‘{areas_table}.id’ and ‘{vacancies_table}.is_sent’ are required and
# they must be at ‘user_filters’ beginning.
#
# {operator} must be from:
#     =, ==, <>, !=, >, >=, <, <=, IN, BETWEEN, IS NULL, LIKE, EXISTS, REGEXP
#     or their NOT synonyms.
#
# type({pattern}) must be in [str, int, float, list, tuple, set].
# {pattern} must be single-level, e.g.
# NOT valid: [1, [2, 3], 4]; [(1, 2, 3, 4)]
# valid: [1, 2, 3, 4], 5, "5"
#
# If you filter by salary, some Telegram messages can show lower salary than
# specified value because of gross salary (Telegram messages ALWAYS show
# salary after taxes).
user_filters:
  '{areas_table}.id': [IN, [1952, 1, [2, 4], 5]]
  '{vacancies_table}.is_sent': [==, 0]
  '{vacancies_table}.name': [NOT LIKE, 'продаж, продавец']
  '{vacancies_table}.snippet_responsibility': [NOT REGEXP, продавец]
  '{vacancies_table}.snippet_requirement': [NOT REGEXP, продавец]

# Filters support these columns (key: table name, value: table’s columns):
# This list is  autogenerated from ‘database’ structure.
filters_columns:
  areas:
  - id
  - parent_id
  - name
  vacancies:
  - id
  - name
  - area_id
  - address_city
  - address_street
  - employer_id
  - alternate_url
  - salary_from
  - salary_to
  - salary_currency
  - salary_gross
  - snippet_responsibility
  - snippet_requirement
  - schedule_name
  - working_time_intervals_name
  - working_time_modes_name
  - is_sent
  - premium
  - department
  - has_test
  - response_letter_required
  - type_id
  - type_name
  - address
  - response_url
  - sort_point_distance
  - published_at
  - created_at
  - archived
  - apply_alternate_url
  - insider_interview
  - url
  - contacts
  - schedule_id
  - accept_temporary
  - address_building
  - address_description
  - address_lat
  - address_lng
  - address_raw
  - address_metro
  - address_id
  - employer_logo_urls
  - salary
  - insider_interview_id
  - insider_interview_url
  - working_days_id
  - working_days_name
  - working_time_intervals_id
  - working_time_modes_id
  - department_id
  - department_name
  streets:
  - area_id
  - city_name
  - street_name
  metro_stations:
  - station_id
  - station_name
  - line_name
  - station_lat
  - station_lng
  employers:
  - id
  - name
  - url
  - alternate_url
  - logo_url_original
  - logo_url_240
  - logo_url_90
  - vacancies_url
  - is_trusted
  vacancies_metro_stations:
  - vacancy_id
  - metro_station_id
