#!/usr/bin/env python3

"""
Get HH vacancies with regart to filters.
"""
import requests
import json
import datetime
import tests

HEADERS  = {'user-agent': 'kkecher (kkecher@outlook.com)'}
AREAS = {'areas': ['Москва', 'Московская область']}
FILTERS = {}

def get_areas():
    """
    Get json with geo (countries, areas, cities) and their ids.
    """
    url = 'https://api.hh.ru/areas'
    r = requests.get(url, headers=HEADERS)
    areas = r.json()
    tests.test_get_areas(r, areas)

    #get current  time to test writing to file
    write_to_file_time = datetime.datetime.now().replace(microsecond=0).isoformat()
    with open ('areas.txt', 'w') as f:
        f.write(write_to_file_time)
        f.write(2*'\n')
        f.write(json.dumps(areas, indent=4, ensure_ascii=False))
        tests.test_write_to_file('areas.txt', write_to_file_time)        
    return (areas)

def filter_areas(areas):
    """
    Filter geo json with regard to AREAS
    """
    filtered_areas_ids = []
    filtered_areas_count = []
    
    russia = areas[0]
    areas = russia['areas']
    for area_count, area in enumerate(areas):
        if area['name'] in AREAS['areas']:
            filtered_areas_ids.append(area['id'])
            filtered_areas_count.append(area_count)
    tests.test_filter_areas(AREAS['areas'], areas, filtered_areas_count, filtered_areas_ids)
    return (filtered_areas_ids)

def get_vacancies(areas, filtered_areas_ids):
    """
    Get vacancies with regard to AREAS.
    """
    FILTERS.update({'area': filtered_areas_ids})
    vacancy_file = 'vacancies.txt'
    
    url = 'https://api.hh.ru/vacancies'
    r = requests.get(url, headers=HEADERS, params=FILTERS)
    vacancies = r.json()
    #        if is_passed_test_vacancies(r, vacancies):
    write_to_file_time = datetime.datetime.now().replace(microsecond=0).isoformat()
    with open(vacancy_file,  'w') as f:
        f.write(write_to_file_time)
        f.write(2*'\n')
        f.write(json.dumps(r.json(), indent=4, ensure_ascii=False))
    tests.test_get_vacancies(areas, filtered_areas_ids, r, vacancies)
#
#                if not is_passed_test_write_to_file(vacancy_file, write_to_file_time):
#                    #TBD send message to Telegram if fail
#                    raise IOError('ERROR! Coulnd write to file.')
#        else:
#            #TBD send message to Telegram if fail
#            raise ValueError('ERROR! Got invalid data.')
#        return ()
#    except:
#        #TBD send message to Telegram if fail
#        pass

#url = 'https://api.hh.ru/vacancies'    
#r = requests.get(url, headers=HEADERS, params=AREAS)
#with open('vacancies.txt') as f:
#    vacancies = json.load(f)

#check_vacancies = is_passed_test_vacancies(r, vacancies)
#print ('check_vacancies = ', check_vacancies)

#get_vacancies(AREAS)
areas = get_areas()
filtered_areas_ids = filter_areas(areas)
get_vacancies(areas, filtered_areas_ids)

print ('Done!')

#TBD use Etag / Cache-Control / Expires to get only new vacancies https://github.com/hhru/api/blob/master/docs_eng/cache.md
